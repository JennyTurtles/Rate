<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.sys.rate.mapper.GroupsMapper">
    <resultMap id="BaseResultMap" type="org.sys.rate.model.Groups">
        <id column="ID" property="ID" jdbcType="INTEGER"/>
        <result column="expertCount" property="expertCount" jdbcType="INTEGER"/>
        <result column="participantCount" property="participantCount" jdbcType="INTEGER"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <!--<result column="startDate" property="startDate" jdbcType="INTEGER"/>-->
        <!--<result column="scoreItemCount" property="scoreItemCount" jdbcType="INTEGER"/>
        <result column="score" property="score" jdbcType="DOUBLE"/>
        <result column="groupCount" property="groupCount" jdbcType="INTEGER"/>
        <result column="expertCount" property="expertCount" jdbcType="INTEGER"/>
        <result column="participantCount" property="participantCount" jdbcType="INTEGER"/>
        <result column="comment" property="comment" jdbcType="VARCHAR"/>
        <result column="byExpert" property="byExpert" jdbcType="BIT"/>-->
        <result column="activityID" property="activityID" jdbcType="INTEGER"/>
    </resultMap>
    <sql id="Base_Column_List">
        ID, activityID, name, expertCount, participantCount
    </sql>
    <select id="maxWorkID" resultType="java.lang.Integer">
        select max(workID)
        from employee
    </select>
    <select id="getEmployeeById" resultMap="BaseResultMap">
        select *
        from `groups`
        where ID= #{id}
    </select>
    <select id="getActivitiesByPage" resultMap="BaseResultMap">
        select g.ID,g.activityID,g.name,g.expertCount,g.participantCount from `groups` g
        <if test="keywords!=null">
            where g.activityID=#{keywords}
        </if>
        <if test="page !=null and size!=null">
            limit #{page},#{size}
        </if>
    </select>
    <select id="getTotal" resultType="java.lang.Long">
        select count(*) from `groups` g
        <if test="keywords!=null">
            where g.activityID=#{keywords}
        </if>
    </select>
    <select id="getTotalforactivityCount" resultType="java.lang.Integer">
        select count(*) from `groups`
        <if test="keywords!=null">
            where activityID=#{keywords}
        </if>
    </select>

    <select id="getActivitiesByPageAndCompany" resultMap="BaseResultMap">
        select
        e.id,e.name,e.startDate,e.scoreItemCount,e.score,e.groupCount,e.expertCount,e.participantCount,e.comment,e.institutionID
        from activities e where e.deleteFlag = '0'
        <if test="company !=null">
            and e.name like concat('%',#{company},'%')
        </if>
        <if test="page !=null and size!=null">
            limit #{page},#{size}
        </if>
    </select>
    <select id="getTotalByCompany" resultType="java.lang.Long">
        select count(*) from participants e
        <where>
            and e.deleteFlag = '0'
            <if test="company !=null">
                and e.company like concat('%',#{company},'%')
            </if>
        </where>
    </select>
    <insert id="insert" parameterType="org.sys.rate.model.Groups">
        insert into `groups` (ID, activityID, name, expertCount, participantCount, parentID)
        values (#{ID,jdbcType=INTEGER}, #{activityID,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR},
                #{expertCount,jdbcType=INTEGER}, #{participantCount,jdbcType=INTEGER}, #{parentID,jdbcType=INTEGER});
        UPDATE activities
        SET groupCount = groupCount + 1
        WHERE ID = #{activityID,jdbcType=INTEGER}
    </insert>

    <insert id="insertMultipleGroups" useGeneratedKeys="true" keyProperty="ID" parameterType="org.sys.rate.model.Groups">
        insert into `groups` (activityID, name, expertCount, participantCount) values
        (#{activityID}, #{name,jdbcType=VARCHAR},
        #{expertCount,jdbcType=INTEGER}, #{participantCount,jdbcType=INTEGER});
    </insert>
    <update id="updateGroupCount" parameterType="Integer">
        UPDATE activities
        SET groupCount = groupCount + 1
        WHERE ID = #{activityID}
    </update>

    <update id="insert_update" parameterType="org.sys.rate.model.Groups">
        UPDATE institution a
        SET a.activityCount = a.activityCount + 1
        WHERE a.id = #{institutionID,jdbcType=INTEGER}
    </update>

    <update id="delete" parameterType="org.sys.rate.model.Groups">
        DELETE
        FROM participants
        WHERE groupID = #{ID,jdbcType=INTEGER};

        DELETE
        FROM expertactivities
        WHERE groupID = #{ID,jdbcType=INTEGER};

        DELETE
        FROM `groups`
        WHERE ID = #{ID,jdbcType=INTEGER};
    </update>

    <update id="update" parameterType="org.sys.rate.model.Groups">
        UPDATE `groups`
        SET name=#{name,jdbcType=VARCHAR}
        where ID = #{ID,jdbcType=INTEGER}
    </update>

    <select id="queryMaxId" resultType="java.lang.Integer">
        select max(id)
        from `groups`
    </select>
    <select id="getGroupScore" resultType="org.sys.rate.model.ScoreDetail">
        select g.activityID activityID,g.ID groupID,g.`name` groupname,max(P.score) maxscore,min(P.score) minscore,ROUND(AVG(P.score),2) avescore,ROUND(variance(P.score),2) varscore
        from participants as P
        RIGHT JOIN `groups` as g
        on P.groupID=g.ID
        where g.activityID=#{keywords}
        group by g.activityID,g.ID,g.`name`
        <if test="page !=null and size!=null">
            limit #{page},#{size}
        </if>
    </select>
    <select id="isGroupsExit" resultType="Integer">
        select COUNT(*) from `groups` where activityID = #{activityID}
    </select>

    <insert id="insertGroups">
        INSERT INTO `groups` (activityID, name, expertCount, participantCount,parentID)
        VALUES
        <foreach collection="list" item="item" separator=",">
            (#{item.activityID}, #{item.name}, #{item.expertCount},#{item.participantCount}, #{item.parentID})
        </foreach>
    </insert>
</mapper>
